name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  composer:
    name: Build Composer Packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: gd, zip, intl

      - name: Install Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php
          php -r "unlink('composer-setup.php');"
          mv composer.phar /usr/local/bin/composer

      - name: Install Composer Packages
        working-directory: ./src
        run: |
          composer install --ignore-platform-req=ext-gd --ignore-platform-req=ext-zip --ignore-platform-req=ext-intl

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: source-code
          path: src/**

  optimise:
    name: Minify and Optimise
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Cache
        uses: actions/cache@v3
        with:
          path: src/node_modules
          key: custom-node-cache-${{ runner.os }}-${{ hashFiles('src/package-lock.json') }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install and Build Frontend
        working-directory: ./src
        run: |
          npm config set "@fortawesome:registry" https://npm.fontawesome.com/
          npm config set "//npm.fontawesome.com/:_authToken" ${{ secrets.FONT_AWESOME_TOKEN }}
          npm install
          npm run build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: optimised-source
          path: src/**

  nginx:
    name: Push NGINX to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        run: |
          docker build --target prod -t shore_nginx -f ./build/docker/nginx/Dockerfile .
          docker tag shore_nginx:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/shore_nginx:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/shore_nginx:${{ github.sha }}

  php:
    name: Push PHP to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        run: |
          docker build --build-arg CI_BUILD_NUMBER=${{ github.run_number }} \
            --build-arg CI_BUILD_COMMIT=${{ github.sha }} \
            --build-arg CI_BUILD_BRANCH=${{ github.ref_name }} \
            --target prod -t shore_php -f ./build/docker/php/Dockerfile .
          docker tag shore_php:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/shore_php:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/shore_php:${{ github.sha }}

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    needs: [composer, optimise, nginx, php]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.AWS_CLUSTER }} \
            --service ${{ secrets.AWS_SERVICE_NAME }} \
            --force-new-deployment
